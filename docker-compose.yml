version: '3.5'

services:
  redis:
    container_name: redis
    image: redis:alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - internal_net
    volumes: 
      - 'redis_data:/data'
    restart: always

  rabbit:
    container_name: rabbitmq
    image: 'rabbitmq:alpine'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    networks:
      - internal_net
    ports:
      - "15672:15672"
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq'
    restart: always

  postgres:
    container_name: postgresql
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    networks:
      - internal_net
    volumes:
      - 'postgresql_data:/var/lib/postgresql/data'
      - './init_postgres.sql:/docker-entrypoint-initdb.d/init_postgres.sql'
    restart: always

  mongo:
    container_name: mongodb
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - internal_net
    volumes:
      - 'mongodb_data:/data/db'
      - './init_mongo.sh:/docker-entrypoint-initdb.d/init_mongo.sh'
    restart: always
  worker:
    container_name: celery_worker
    build:
      context: ./app
      dockerfile: Dockerfile.celery-worker
    environment:
      AV_APIKEY: ${AV_APIKEY}
      FH_APIKEY: ${FH_APIKEY}

      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      RABBIT_HOST: rabbit
      RABBIT_PORT: 5672
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
    networks:
      - internal_net
    depends_on:
      - redis
      - rabbit
      - mongo
      - postgres
    restart: always

  beat:
    container_name: celery_beat
    build:
      context: ./app
      dockerfile: Dockerfile.celery-beat
    environment:
      AV_APIKEY: ${AV_APIKEY}
      FH_APIKEY: ${FH_APIKEY}

      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      REDIS_HOST: redis
      REDIS_PORT: 6379

      RABBIT_HOST: rabbit
      RABBIT_PORT: 5672
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
    networks:
      - internal_net
    depends_on:
      - worker
    restart: always
  
  api:
    container_name: rl_finance_api
    build:
      context: ./app
      dockerfile: Dockerfile.api
    environment:
      LOG_LEVEL: debug
      MAX_WORKERS: 4
      AV_APIKEY: ${AV_APIKEY}
      FH_APIKEY: ${FH_APIKEY}

      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      RABBIT_HOST: rabbit
      RABBIT_PORT: 5672
      RABBIT_USERNAME: ${RABBIT_USERNAME}
      RABBIT_PASSWORD: ${RABBIT_PASSWORD}
    networks:
      - internal_net
    ports:
      - '8090:80'
    depends_on:
      - redis
      - postgres
      - mongo
      - worker
    restart: always

volumes:
  redis_data: null
  postgresql_data: null
  mongodb_data: null
  rabbitmq_data: null

networks:
  internal_net:
    driver: bridge
