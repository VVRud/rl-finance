version: '3.5'

services:
  redis:
    image: redis:alpine
    networks:
      - internal_net
    volumes: 
      - './redis.conf:/usr/local/etc/redis/redis.conf:ro'
      - 'redis_data:/data'
    entrypoint: redis-server /usr/local/etc/redis/redis.conf
    restart: always

  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    networks:
      - internal_net
    volumes:
      - 'postgresql_data:/var/lib/postgresql/data'
      - './init_postgres.sql:/docker-entrypoint-initdb.d/init_postgres.sql:ro'
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: database@finances.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - internal_net
    ports:
      - '8080:80'
    restart: always

  mongo:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - internal_net
    volumes:
      - 'mongodb_data:/data/db'
      - './init_mongo.sh:/docker-entrypoint-initdb.d/init_mongo.sh:ro'
    restart: always
    
  worker:
    build:
      context: ./app
      dockerfile: Dockerfile.celery-worker
    environment:
      LOG_LEVEL: ERROR
      C_FORCE_ROOT: 'true'
      
      FH_APIKEY: ${FH_APIKEY}
      WORKER_IS_SERVER: 1

      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_WORKER_DB: ${REDIS_WORKER_DB}
      REDIS_RESULTS_DB: ${REDIS_RESULTS_DB}
      REDIS_THROTTLER_DB: ${REDIS_THROTTLER_DB}
    networks:
      - internal_net
    depends_on:
      - redis
      - mongo
      - postgres
    restart: always
    
  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=redis://:@redis:6379/${REDIS_WORKER_DB}
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASS}
      - FLOWER_PORT=8892
    networks:
      - internal_net
    ports:
      - 8892:8892
    depends_on:
      - worker

  beat:
    build:
      context: ./app
      dockerfile: Dockerfile.celery-beat
    environment:
      LOG_LEVEL: ERROR
      C_FORCE_ROOT: 'true'
      
      FH_APIKEY: ${FH_APIKEY}
      WORKER_IS_SERVER: 1

      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_WORKER_DB: ${REDIS_WORKER_DB}
      REDIS_RESULTS_DB: ${REDIS_RESULTS_DB}
      REDIS_THROTTLER_DB: ${REDIS_THROTTLER_DB}
    networks:
      - internal_net
    depends_on:
      - worker
    restart: always

  api:
    build:
      context: ./app
      dockerfile: Dockerfile.api
    environment:
      LOG_LEVEL: error
      MAX_WORKERS: 4
      FH_APIKEY: ${FH_APIKEY}

      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

      POSTGRES_MIN_CONN: 5
      POSTGRES_MAX_CONN: 10

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_WORKER_DB: ${REDIS_WORKER_DB}
      REDIS_RESULTS_DB: ${REDIS_RESULTS_DB}
      REDIS_THROTTLER_DB: ${REDIS_THROTTLER_DB}
    networks:
      - internal_net
    ports:
      - '8090:80'
    depends_on:
      - beat
    restart: always

volumes:
  redis_data: null
  postgresql_data: null
  mongodb_data: null

networks:
  internal_net:
    driver: bridge
